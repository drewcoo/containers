{
  "variables": {
    "csf_install_dir": "c:\\DevTools\\",
    "jenkins_install_dir": "c:\\jenkins\\",
    "image_name": "{{env `VM_IMAGE_NAME`}}",
    "tool_install_path": "c:\\jenkins\\tools\\",
    "source_tool_dir": "{{env `VM_TOOL_DIR`}}"
  },
  "builders": [{
    "type": "azure-arm",
    "client_id": "e1fbc0f7-d068-4a69-832d-0829923ada76",
    "client_secret": "021dd043-0c8f-4e5c-a7f7-8afd808d57c2",
    "tenant_id": "19a97c1f-7c05-4f02-9862-463a290ea9ef",
    "subscription_id": "352522cb-948e-43af-af8d-a519b7a274e2",
    "managed_image_resource_group_name": "JenkinsGroup",
    "managed_image_name": "{{user `image_name`}}",
    "os_type": "Windows",
    "image_publisher": "MicrosoftWindowsServer",
    "image_offer": "WindowsServer",
    "image_sku": "2016-Datacenter",
    "communicator": "winrm",
    "winrm_use_ssl": true,
    "winrm_insecure": true,
    "winrm_timeout": "3m",
    "winrm_username": "packer",
    "azure_tags": {
        "dept": "Engineering",
        "task": "Image deployment"
    },
    "location": "westus2",
    "vm_size": "Standard_B4ms"
  }],
  "provisioners": [
    {
      "type": "file",
      "source": "{{user `source_tool_dir`}}",
      "destination": "{{user `jenkins_install_dir`}}"
    },
    {
      "type": "powershell",
      "inline": ["echo Install Chocolatey",
                 "{{user `tool_install_path`}}install_chocolatey.ps1",
                 "echo Add choco.exe to the path.",
                 "echo Many Chocolatey-installed tools go in the same path.",
                 "setx VM_IMAGE_NAME \"{{user `image_name`}}\"",
                 "setx PATH \"C:\\ProgramData\\chocolatey\\bin;%PATH%\""]
    },
    {
      "type": "windows-restart"
    },
    {
      "type": "windows-shell",
      "inline": ["echo Install a bunch of packages with Chocolatey",
                 "choco install -vy {{user `tool_install_path`}}packages.config || if 3010==%errorlevel% set errorlevel=0",
                 "echo Calling setx more than once only keeps the last one, so . . .",
                 "echo The sim build uses cmake.",
                 "echo And the msbuild path.",
                 "echo And VC.",
                 "setx PATH \"C:\\Program Files\\CMake\\bin;C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Professional\\MSBuild\\15.0\\Bin;C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Professional\\VC\\Auxiliary\\Build;C:\\Program Files (x86)\\WiX Toolset v3.10\\bin;%PATH%\"",
                 "echo %PATH%"]
    },
    {
      "type": "windows-restart"
    },
    {
      "type": "windows-shell",
      "inline": ["@echo Verify WiX toolset",
                 "@echo did not install with this: {{user `tool_install_path`}}install_wix_toolset.cmd",
                 "@echo and for some reason choco doesn't put it in the path",
                 "dir /s /b \"C:\\Program Files (x86)\\WiX Toolset v3.10\\bin\\heat.exe\"",
                 "where heat.exe"]
    },
    {
      "type": "windows-shell",
      "inline": ["echo AZCopy CSF files into place",
                 "mkdir {{user `csf_install_dir`}}",
                 "{{user `tool_install_path`}}install_csf.cmd  {{user `csf_install_dir`}}",
                 "echo FINISHED INSTALL OF CSF!!"]
    },
    {
      "type": "windows-restart"
    },
    {
      "type": "powershell",
      "inline": [
        "& $env:SystemRoot\\System32\\Sysprep\\Sysprep.exe /oobe /generalize /quiet /quit",
        "while($true) { $imageState = Get-ItemProperty HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Setup\\State | Select ImageState; if($imageState.ImageState -ne 'IMAGE_STATE_GENERALIZE_RESEAL_TO_OOBE') { Write-Output $imageState.ImageState; Start-Sleep -s 10  } else { break } }"
      ]
    }
  ]
}
